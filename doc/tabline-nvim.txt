TABLINE-NVIM - TABLE OF CONTENTS                                *tabline-nvim*
==============================================================================

  Features                                                |tnv-features|
  Quick start                                             ||tnv-quick-start|
  Tabline rendering                                       |tnv-rendering|
  Settings                                                |tnv-init|
  Main command                                            |tnv-command|
  Mappings                                                |tnv-mappings|
  Themes                                                  |tnv-themes|
  Credits                                                 |tnv-credits|
  License                                                 |tnv-license|



FEATURES                                                        *tnv-features*
==============================================================================

The main features of the plugin are:

  * three tabline modes: tabs, buffers, |arglist|              |tnv-rendering|
  * clickable {1} and reorderable bufferline
  * rename tabs/buffers
  * optional buffer filtering on the base of CWD/custom filters

Also:

  * `nvim-web-devicons` {1} support {2}
  * tab CWD/name can be shown in the right corner of the tabline
  * commands to quickly set/change (tab/window) working directory
  * reopen closed tabs
  * clean up buffers across all tabs and other commands
  * session management with fzf

  {1} LMB selects, RMB puts last, S-RMB deletes buffer
  {2} https://github.com/kyazdani42/nvim-web-devicons
  {3} with a font that supports them, for example https://www.nerdfonts.com/



QUICK START                                                  *tnv-quick-start*
==============================================================================

Add to your vimrc (or run in command line):
>
  lua require'tabline.setup'.setup()

to load plugin with default settings. If you want default mappings, also add:
>
  lua require'tabline.setup'.mappings(true)

If you want to customize the settings, execute:
>
  :Tabline config

Consult |tnv-settings| to understand the meaning of the different settings.




TABLINE RENDERING                                              *tnv-rendering*
==============================================================================

The tabline can be rendered in different modes:

  `tabs`     similar to default, but only showing buffer basenames
  `args`     buffers contained in the arglist
  `buffers`  show N (default 10) most recently accessed buffers
  `auto`     `tabs` if there is more than one tab, otherwise `buffers`

Default order is `{ 'auto', 'buffers', 'arglist' }`




SETTINGS                                                        *tnv-settings*
==============================================================================

Settings can be passed in a table to the `setup()` function when the plugin is
initialized. For the default value, run `:Tabline config`

------------------------------------------------------------------------------
  Setting               Description~
------------------------------------------------------------------------------
  |main_cmd_name|         the ex command name
  |modes|                 see below
  |filtering|             enables bufferline filtering based on CWD
  |cwd_badge|             displays CWD in the right corner
  |mode_badge|            see below
  |tabs_badge|            see below
  |label_style|           see below
  |show_full_path|        shortened full path, for example `~/.l/s/n/s/file.ext`
  |show_unnamed|          show unnamed buffers in the bufferline
  |overflow_arrows|       show an arrow where tabline overflows
  |max_recent|            number of buffers that can be rendered (most recent)
  |scratch_label|         label for scratch buffers
  |unnamed_label|         label for unnamed regular buffers
  |mapleader|             used in the mappings below
  |default_mappings|      apply default mappings before any mapping you set
  |cd_mappings|           enable normal mode mappings that start with `cd`
  |theme|                 if `nil`, you must set up highlights yourself
  |ascii_only|            avoid any kind of non-ascii character
  |show_icons|            icons from `nvim-web-devincons`
  |show_button|           show close button to delete buffer (`buffers` mode)
  |colored_icons|         will use normal bg if false
  |icon_spacing|          spaces between icon and filename (default '  ')
  |separators|            for active and inactive tabs/buffers
  |sessions_dir|          directory for the session management commands


  |modes|        {table}
               'auto', 'tabs', 'buffers', 'args', in any order
               `auto` will automatically switch to tabs mode if there is more
               than one tab, or to `buffers` mode when there is only one tab
               `args` shows the arglist, but will be skipped if this is empty

  |mode_badge|   {table}, {bool}, {nil}
               for example: `{ buffers = 'B', args = 'A', auto = '' }`
               If `nil` or `false`, the badge is not shown.
               If `true`, default names are used.
               If it's a table, and value is nil or an empty string it won't be
               showed. `auto` shows the actual mode instead of itself, unless
               you define it in this table.

  |tabs_badge|   {table}, {false}
               Displays current tab number. Set to false (not nil) to disable.
               `visibility` is a list of modes that show it.
               `fraction` is the badge style
               `left` is the position in the tabline

  |label_style|  {string}, {table}
               'sep', 'order' or 'bufnr'
               `order` will show the position in the bufferline, `bufnr` will
               show the actual buffer number, `sep` a simple colored separator
               (with a different color in tabs and buffers mode).
               Also as table: `{ buffers = 'bufnr' }` will use 'bufnr' in
               buffers mode, 'sep' (default value) for other modes.




MAIN COMMAND                                                     *tnv-command*
==============================================================================

There is a single command, that accepts a series of subcommands, possibly with
extra arguments. Default name for the command is `:Tabline`, but it can be
changed in the settings.

Some subcommands can be <bang>ed, to toggle setting, for example:
>
  :Tabline filtering!
  :Tabline pin!
<
------------------------------------------------------------------------------
  Subcommand    Arguments      Description~
------------------------------------------------------------------------------

  mode          next, {mode}   change tabline mode
  next          {count}        select next tab/buffer
  prev          {count}        select previous tab/buffer
  away                         move current buffer to the last position
  left          {count}        move current buffer to the left
  right         {count}        move current buffer to the right
  close                        delete buffer, but keep window
  filtering     off, !         enable/toggle cwd buffer filtering
  filter        !, {filter}    pattern to filter buffers (|tnv-filtering|)
  pin           !              pin current buffer, or toggle(!)
  unpin         !              unpin current buffer or all(!) buffers
  reopen                       reopen last closed tab
  fullpath      off, !         toggle basename/shortened full paths
  button        off, !         toggle close button
  theme         {theme}        set a theme |tnv-themes|
  bufname       {name}         give a name to current buffer
  tabname       {name}         ,,      ,,             tab
  buficon       {icon}         give an icon to current buffer
  tabicon       {icon}         ,,      ,,             tab
  bufreset                     remove buffer customizations (name, icon)
  tabreset                     ,,     tab    ,,
  resetall                     reset all customizations
  cleanup                      delete buffers unrelated to any of the CWDs
  minimize                     delete buffers without a window in any tabpage
  purge         !              delete/wipe(!) non-regular buffers in tabpage
  buffers                      |fzf| choose among valid buffers
  closedtabs                   |fzf| choose closed tab to reopen
  session       load, ...      |fzf| load session, or save/create new session
  config                       open buffer with sample configuration


Note: |fzf| means that it needs fzf {1} (the command-line tool, not fzf.vim).

                                         {1}   https://github.com/junegunn/fzf

Session commands will use |vim-obsession| if available.
By default the session directory is `stdpath('data') .. '/session'`, see
|standard-path|. It can be overridden with `settings.sessions_dir`.



FILTERING                                                      *tnv-filtering*
==============================================================================

Filtering only applies to 'buffers' mode.

There are two kinds of filtering that can be enabled:

  - CWD filtering
  - regex filtering against buffer name

CWD filtering makes sense if local working directories are being used,
either via |:tcd| or |:lcd|. When enabled, only buffers whose path is within
the current CWD will be showed in the tabline.
It is enabled by default, controlled by the `filtering` setting, and can be
toggled with >
  :Tabline filtering!

Regex filtering is independent from CWD filtering, not controlled by
a setting, but must be enabled with >
  :Tabline filter {lua regex pattern}

When using <bang>, filter is applied to all tabs: >
  :Tabline filter! {lua regex pattern}

To reset filter use an empty string (<bang> resets for all tabs): >
  :Tabline filter[!]

If a regex filter is defined for the current tab, it is shown in the right
corner of the tabline.

Note: listed buffers with open windows will be shown in the tabline,
regardless of any applied filter.



MAPPINGS                                                        *tnv-mappings*
==============================================================================

To enable default mappings, set the relative option in the settings.
Otherwise define a mappings table (get it from `:Tabline config`), then in
your vimrc:
>
  local mappings = { your mappings }
  lua require'tabline.setup'.mappings(mappings)

You can also define them by mapping directly `:Tabline` with the appropriate
subcommand and arguments.

Example:
>
  local tabline = require'tabline.setup'

  -- only use your own mappings
  local settings = { default_mappings = false, }

  local L = '<leader><leader>'

  local mappings = {
    ['mode next'] =   '<F5>',   -- change tabline mode
    ['next'] =        ']b',     -- select next buffer/tab
    ['prev'] =        '[b',     -- select previous buffer/tab
    ['tabname'] =     'tN',     -- give a custom label to the current tab
    ['away'] =        L .. 'a', -- move current buffer away from sight (put last)
    ['filtering!'] =  L .. 'f', -- toggle buffer filtering based on cwd
    ['fullpath!'] =   L .. '/', -- toggle showing the paths/basenames
    ['pin!'] =        L .. 'p', -- toggle pin buffer
    ['reopen'] =      L .. 'u', -- reopen closed tab
    ['purge'] =       L .. 'x', -- close anything in the tabpage that isn't a regular buffer
    ['cleanup'] =     L .. 'X', -- delete all buffers that are unrelated to current directories
  }

  tabline.setup(settings)
  tabline.mappings(mappings)
<

------------------------------------------------------------------------------
                                                                      *tnv-cd*
There is also a set of mappings to quickly change the CWD, that start with
`cd`. These can be also be enabled with a setting, but are not customizable.

The default directory is either a git repository or the directory of the
current file. In the command line, use <C-j> to change type (`cd`, `tcd`, `lcd`).

Mapping~
   cdw     set the global working directory
   cdl     set a window-local working directory
   cdt     set a tab-local working directory
   cdc     |:cd| to `[count]` parent directory of current buffer
   cd?     show cwd (global/local/tab), git dir, tags

------------------------------------------------------------------------------
                                                                    *tnv-plug*
There is a <Plug> available, to select a buffer in the bufferline.
In 'tabs' mode it works like |gt|.

You have to map the <Plug> yourself. For example:
>
  " press key, then type a character to go to corresponding buffer/tab
  " it also accepts a count, then selects directly the buffer
  nmap gb <Plug>(TabSelect)

  " select a buffer with count, or execute another command
  nmap <expr> gb v:count ? "\<Plug>(TabSelect)" : ":Buffers\r"

The first form may be better if you use a style with separators, instead of
numbers.




THEMES                                                            *tnv-themes*
==============================================================================

Theme can be changed with `:Tabline theme {theme name}`

Available themes are:

  `default`       adaptive, uses vim highlight groups
  `apprentice`    dark theme
  `themer`        adaptive, needs `themer.lua` {1}, uses its highlight groups

                                  {1} https://github.com/ThemerCorp/themer.lua

Otherwise you can create your own, but it's not that straightforward, since
there are a lot of highlight groups. First define a table:
>
  local theme = {
    name = 'theme_name',
    ... -- highlight groups here
  }
<
Then you must register it: >
  require('tabline.themes').add(theme)

Then you can load it with: >
  :Tabline theme theme_name

Highlight groups are:

  `TSelect`         selected tab/buffer
  `TVisible`        buffers that have a window
  `THidden`         buffers without a window
  `TExtra`          buffers with window, not belonging to current tab
  `TSpecial`        special buffers (git status, etc)
  `TFill`           tabline background
  `TCorner`         right corner with CWD
  `TNumSel`         for when using numbers instead of separators
  `TNum`            ,, ,,

Most of them have a `Dim`, `Sep` and `Mod` variants, that control inactive
icons, separators and modified mark.

Look at the `apprentice` theme for a full example. The `%s` placeholder is
where the group name will go.

For example: >
  TSelect = '%s gui=NONE guifg=#bcbcbc guibg=#444444',

becomes: >
  hi TSelect gui=NONE guifg=#bcbcbc guibg=#444444'

while: >
  TSelect = 'link %s Pmenu',

becomes: >
  hi link TSelect Pmenu




CREDITS                                                          *tnv-credits*
==============================================================================

Bram Moolenaar for Vim
barbar.nvim for inspiration               https://github.com/romgrk/barbar.nvim



LICENSE                                                           *tnv-license*
==============================================================================

MIT


vim:tw=78:et:sw=2:ts=2:ft=help:nowrap:
